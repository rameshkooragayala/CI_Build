#!/bin/sh

SCRIPT_NAME="webbridge.sh"
SOURCE=/NDS/metrological

cleanup() {
	echo "${SCRIPT_NAME}: '$1'"
	# Shutdown all our processes in non stub version
	if [ ! -f $SOURCE/NDS/webbridge-stub ]; then
		killall -9 rpcprocess 2>/dev/null
		killall -9 WPEWebProcess 2>/dev/null
		killall -9 WPENetworkProcess 2>/dev/null
		killall -9 WPEDatabaseProcess 2>/dev/null
		WEBBRIDGE=$(ps | grep '/usr/bin/webbridge' | grep -v grep | awk '{print $1}')
		if [ "$WEBBRIDGE" != "" ]; then
			kill -9 $WEBBRIDGE
		fi
	fi
}

if [ -f /tmp/shutdown ]; then
	cleanup shutdown
	exit 0
fi

# Select Storage type: HDD or Flash
BUILD_OPT=$(cat /NDS/options_start)
if [[ "$BUILD_OPT" =~ "plt_samgw"  || "$BUILD_OPT" =~ "plt_ciscogw" ]]; then
	STORAGE_FILE="/tmp/diag"
else
	# Enable over-commit
	echo 1 > /proc/sys/vm/overcommit_memory
	STORAGE_FILE="/tmp/core_dir"
fi

# Wait for Storage
COUNT=0
while [ ! -f $STORAGE_FILE ];
do
	sleep 1
	COUNT=$((COUNT+1))
done
STORAGE_PATH="`cat $STORAGE_FILE`"
if [ "$COUNT" != "0" ]; then
	echo "${SCRIPT_NAME}: have waited ${COUNT} seconds for storage path '${STORAGE_PATH}'"
else
	echo "${SCRIPT_NAME}: storage path '${STORAGE_PATH}'"
fi

# Symlink /etc
ln -sfn $SOURCE/etc/playready /etc/playready
ln -sfn $SOURCE/etc/ssl /etc/ssl
ln -sfn $SOURCE/etc/fonts /etc/fonts

# Symlink /usr/lib
ln -sfn $SOURCE/usr/lib/gio /usr/lib/gio

# Symlink /usr/share
mkdir -p /usr/share/fonts
ln -sfn $SOURCE/usr/share/mime /usr/share/mime
ln -sfn $SOURCE/usr/share/X11 /usr/share/X11
ln -sfn $SOURCE/usr/share/fonts/ttf-bitstream-vera /usr/share/fonts/ttf-bitstream-vera

# Symlink /root
rm -rf $SOURCE/root
mkdir -p $STORAGE_PATH/app
ln -sfn $STORAGE_PATH/app $SOURCE/root
mkdir -p $SOURCE/root/QueueCommunicator

# Netflix
if [ ! -d $SOURCE/root/Netflix ]; then
	mkdir -p $SOURCE/root/Netflix/dpi
	ln -sfn /etc/playready $SOURCE/root/Netflix/dpi/playready
fi

# Firewall for non-prod builds
if [ -f /NDS/drivers/open_firewall_port.sh ]; then
	/NDS/drivers/open_firewall_port.sh tcp 80
	/NDS/drivers/open_firewall_port.sh tcp 9998
	/NDS/drivers/open_firewall_port.sh tcp 9536
fi

# Shutdown all our processes in non stub version
cleanup restart

# Netflix EGL and GLESv2 debug
#ln -sfn /usr/lib/libEGL.so /lib/libEGL.so
#ln -sfn /usr/lib/libGLESv2.so /lib/libGLESv2.so
#mkdir -p $HOME/ogltrace
#export GFX_LOG_FILE=$HOME/ogltrace/ogltrace
#export NETFLIX_LD_PRELOAD="$SOURCE/NDS/libegl_log.so $SOURCE/NDS/libgl2_log.so"

# Exports
export HOME=$SOURCE/root
export PATH=$SOURCE/usr/bin:/bin:/usr/bin
export GST_PLUGIN_PATH=$SOURCE/usr/lib/gstreamer-1.0
export GST_PLUGIN_SCANNER=$SOURCE/usr/libexec/gstreamer-1.0/gst-plugin-scanner
export LD_LIBRARY_PATH=$SOURCE/lib:$SOURCE/usr/lib:$SOURCE/usr/lib/gstreamer-1.0:/lib/:/usr/lib
#export DISABLE_FRAMERATE_UPDATE=1
export MODEL_NAME=$(cat /dev/nds/versioninformation | sed -n s/^MODEL_NAME://p | cut -c1-9)
export HDMI_AUDIO_APPLICATION=/usr/bin/audio_hdmi_out

# Clock
if [ -f /NDS/lib/libextClock.so ]; then
	export LD_PRELOAD=/NDS/lib/libextClock.so
fi

if [ "x$MODEL_NAME" == "xSMT-E6400" ]; then                                                    
   echo "Start wait for network app"
   /NDS/metrological/usr/bin/NetworkInfo
fi

# Short sleep
sleep 3

# WebBridge
if [ ! -f $SOURCE/NDS/webbridge-stub ]; then
	echo "${SCRIPT_NAME}: launching 'real' webbridge"
	$SOURCE/usr/bin/webbridge -c $SOURCE/etc/webbridge/config.json
else
	ACTIVEPROCESS=`ps | grep webbridge-stub | grep -v grep`
	if [ "x$ACTIVEPROCESS" == "x" ]; then
		echo "${SCRIPT_NAME}: launching 'stub' webbridge"
		$SOURCE/NDS/webbridge-stub
	else
		# ulimit for core dump
		mkdir -p $HOME/cores
		echo "$HOME/cores/core.%e.%p.%h.%t" > /proc/sys/kernel/core_pattern
		ulimit -c unlimited
		echo "${SCRIPT_NAME}: launching 'dev' webbridge"
		$SOURCE/usr/bin/webbridge -c $SOURCE/etc/webbridge/config.json
	fi
fi
